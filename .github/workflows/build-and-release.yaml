name: Build and Release

on:
  push:
    # branches:
    #   - main  # Modify this to match your main branch 

jobs:
  build-publish:
    # runs-on: ubuntu-latest  # You can change the runner OS if needed

    strategy:
      matrix:
        go-version: [1.21.0]  # Specify the Go version you want to use
        os: [ubuntu-latest]  # Specify the target platforms here
    runs-on: ${{ matrix.os }}


    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
        id: go

      - name: Install Linux Packages
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install libgtk-3-dev -y
          # Add other necessary packages if needed

      - name: Build Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Create build directory
          build_dir="yomitan-import_${{ matrix.os }}"
          mkdir -p "$build_dir"

          # Compile the Go project for the current platform
          go build -o "$build_dir" ./yomitan
          go build -o "$build_dir" ./yomitan-gtk

      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: |
          # Create build directory
          build_dir="yomitan-import_${{ matrix.os }}"
          mkdir -p "$build_dir"

          # Compile the Go project for the current platform
          go build -o "$build_dir" ./yomitan
          go build -ldflags="-H windowsgui" -o "$build_dir" ./yomitan-gtk

      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v3
        with: 
          name: yomitan-import_${{ matrix.os }}
          path: yomitan-import_${{ matrix.os }}
      # Publish to GitHub Releases
      - name: Release on Tag Creation
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            yomitan-import_${{ matrix.os }}
          tag_name: ${{ github.ref }}
          # body: |
          #   Release for ${{ github.ref }}
          draft: true
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      # Publish the compiled binary as a GitHub release asset
      # - name: Upload Release Asset
      #   uses: actions/upload-release-asset@v1
      #   with:
      #     upload_url: ${{ github.event.release.upload_url }}
      #     asset_path: release/myapp-${{ matrix.os }}
      #     asset_name: myapp-${{ matrix.os }}
      #     asset_content_type: application/octet-stream
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
