name: Build and Publish Go Project

on:
  push:
    # branches:
    #   - main  # Modify this to match your main branch

jobs:
  build-publish:
    runs-on: ubuntu-latest  # You can change the runner OS if needed

    strategy:
      matrix:
        go-version: [1.21.0]  # Specify the Go version you want to use
        os: [ubuntu-latest, windows-latest]  # Specify the target platforms here
        # os: [ubuntu-latest, windows-latest, macOS-latest]  # Specify the target platforms here

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
        id: go

      # - name: Build and Publish
      #   run: |
      #     # Compile the Go project for the current platform
      #     go build -o myapp

      #     # Create a release directory
      #     mkdir -p release

      #     # Move the compiled binary to the release directory
      #     mv myapp release/myapp-${{ matrix.os }}
      - name: Build
        # if: matrix.os == 'ubuntu-latest'
        run: |
          # Create build directory
          build_dir="yomitan-import_${{ matrix.os }}"
          mkdir -p "$build_dir"

          # Compile the Go project for the current platform
          go build -o "$build_dir" ./yomitan
          # go build -o "$build_dir" ./yomitan-gtk

      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v3.1.2
        with: 
          name: yomitan-import_${{ matrix.os }}
          path: yomitan-import_${{ matrix.os }}


      # Publish the compiled binary as a GitHub release asset
      # - name: Upload Release Asset
      #   uses: actions/upload-release-asset@v1
      #   with:
      #     upload_url: ${{ github.event.release.upload_url }}
      #     asset_path: release/myapp-${{ matrix.os }}
      #     asset_name: myapp-${{ matrix.os }}
      #     asset_content_type: application/octet-stream
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
